--- 
wordpress_id: 56
layout: post
title: Eclipse Doesn't Have to Beat IntelliJ
wordpress_url: http://blog.codeeg.com/2007/03/08/eclipse-doesnt-have-to-beat-intellij/
permalink: /2007/03/08/eclipse-doesnt-have-to-beat-intellij.html
---
<a href="http://serpensalbus.com/blog/?p=109">Lars says IntelliJ can't beat IDEA for Java development</a>.  I say that's fine, but Eclipse doesn't have to be better than IntelliJ, it just can't be more than $500 worst ;).  How much IDE does one need anyway?  When IntelliJ first entered the market, they offered a IDE that offered a <strong>huge</strong> (with a capital F) productivity gain over existing IDEs, but since then Eclipse has caught up.  While I would concede that IntelliJ has some very smart features that doesn't exist in Eclipse, they only offer me marginal benefits towards overall productivity.  I feel like I make that up easily with Eclipse's excellent source control facilities,  the breadth of plugins available, and through my experience with the tool.

Another thing is, if you're heart is set on IntelliJ, you're most likely never going to give Eclipse a fair shake.  It's the same with me towards IntelliJ.  Good developers invests a lot of time learning and loving our IDE's, and it's not easy for us to give up on something we've invested some much time in mastering.  Having said that, if IntelliJ can revolutionize the IDE market again, I'll be one of the first to plop my $500 down for a license.

Now about the Ruby IDE front -- there's been a lot of news about Ruby IDE support recently, which is a good thing.  Being an Eclipse advocate, I of course have been using RDT and RadRails, but these plugins haven't really advanced as much as I had hope (hopefully the <a title="RadRails Moves to Aptana" href="http://www.rubyonrailsblog.com/articles/2007/03/07/radrails-moves-to-aptana">Aptana crew will be able to get it on track</a>).  I would love to contribute to the project, but I just don't have to time.  This leads to one of my biggest gripes about Eclipse: the cost of building the robust platform that is Eclipse is that it requires a huge investment out of the developers to understand how to code to that platform.  The Eclipse guys need to work on making this easier.

I recently tried the <a title="Ruby Plugin for IntelliJ" href="http://www.jetbrains.com/idea/features/ruby_development.html">Ruby plugin for IntelliJ</a>, but right now there's just too much Java in the way (why do I have to specify a classes directory?  Why do I care about JDKs and compiler options?).  JetBrains really needs to make a standalone Ruby IDE, and not make Ruby development feel like the unwanted stepchild of Java (this is where Eclipse's Perspectives concept really shows its value).  I've also downloaded <a title="NetBeans + Ruby" href="http://blogs.sun.com/tor/entry/netbeans_and_ruby_is_true">NetBeans with the Ruby Plugin</a>, but because of some annoying errors and the lack of documentation (need to know what the shortcuts are, see IntelliJ's write ups on their Ruby Plugin) I decided I'll wait until that project is further along. Initial impression is that it doesn't seem to suffer from the 'peanut butter in my chocolate' problem that IntelliJ has, but why does it start WEBrick when I load the project, and how would I change that to be Mongrel?

I would love to give TextMate a whirl, but I'm not ready to pay $2,060 for it (that's TextMate plus the MacBook Pro I would get to run it on -- I'm on Ubuntu Linux).

One thing I would like to say about all these IDEs (TextMate excluded since I've never used it): I wonder if the path that these IDEs are going is sub-optimal.  Should we be be building Ruby IDE's in the Java mold, or should we be doing it in Ruby/RoR/CoC mold?  If someone was to build an IDE not knowing what Eclipse/NetBeans/IntelliJ/Visual Studio is, what would it look like?

For now I've gone back to Eclipse (I'm in love with the 'Synchronize with Repository' feature, where is it in IntelliJ?), but I'm going to try the <a title="Dynamic Language Toolkit for Eclipse" href="http://www.eclipse.org/dltk/">Ruby support in the Dynamic Language Toolkit</a> instead of RDT to see how that works out.  I'll post a follow-up about my experiences with DLTK and Ruby+NetBeans once I get more time with them.
